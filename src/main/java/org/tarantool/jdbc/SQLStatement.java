package org.tarantool.jdbc;

import org.tarantool.JDBCBridge;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Collections;

@SuppressWarnings("Since15")
public class SQLStatement implements Statement {
    protected final SQLConnection connection;
    private SQLResultSet resultSet;
    private int updateCount;
    private int maxRows;
    protected SQLResultSet generatedKeys;

    protected SQLStatement(SQLConnection sqlConnection) {
        this.connection = sqlConnection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        discardLastResults();
        return connection.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return executeUpdate(sql, NO_GENERATED_KEYS);
    }

    @Override
    public void close() throws SQLException {

    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return maxRows;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
       maxRows = max;
       if(resultSet!=null) {
           resultSet.maxRows = maxRows;
       }
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void cancel() throws SQLException {

    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {

    }

    @Override
    public void setCursorName(String name) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return execute(sql, NO_GENERATED_KEYS);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        try {
            return resultSet;
        } finally {
            resultSet = null;
        }
    }

    @Override
    public int getUpdateCount() throws SQLException {
        try {
            return updateCount;
        } finally {
            updateCount = -1;
        }
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return false;
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        if (direction != ResultSet.FETCH_FORWARD) {
            throw new SQLFeatureNotSupportedException();
        }
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return ResultSet.FETCH_FORWARD;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
    }

    @Override
    public int getFetchSize() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return ResultSet.TYPE_FORWARD_ONLY;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void clearBatch() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        if (generatedKeys == null) {
            return new SQLResultSet(JDBCBridge.EMPTY);
        }
        return generatedKeys;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        discardLastResults();
        JDBCBridge bridge = connection.executeUpdate(sql);
        if (autoGeneratedKeys == RETURN_GENERATED_KEYS) {
            generatedKeys = new SQLResultSet(JDBCBridge.mock(Collections.singletonList((String)null),
                bridge.getGeneratedKeys()));
        }
        return bridge.getRowCount();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        discardLastResults();
        return handleResult(connection.execute(sql), autoGeneratedKeys == RETURN_GENERATED_KEYS);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return connection.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public void closeOnCompletion() throws SQLException {

    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    /**
     * Clears the results of the most recent execution.
     */
    protected void discardLastResults() {
        updateCount = -1;
        if (generatedKeys != null) {
            try {
                generatedKeys.close();
            } catch (Exception ignored) {
                // No-op.
            }
            generatedKeys = null;
        }
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (Exception ignored) {
                // No-op.
            }
            resultSet = null;
        }
    }

    /**
     * Sets the internals according to the result of last execution.
     *
     * @param result The result of SQL statement execution.
     * @return {@code true}, if the result is a ResultSet object.
     */
    protected boolean handleResult(Object result, boolean returnGeneratedKeys) {
        if (result instanceof SQLResultSet) {
            resultSet = (SQLResultSet) result;
            resultSet.maxRows = maxRows;
            updateCount = -1;
            return true;
        } else if (result instanceof JDBCBridge) {
            JDBCBridge bridge = (JDBCBridge)result;
            resultSet = null;
            updateCount = bridge.getRowCount();
            if (returnGeneratedKeys) {
                generatedKeys = new SQLResultSet(JDBCBridge.mock(Collections.singletonList((String) null),
                    bridge.getGeneratedKeys()));
            }
            return false;
        } else {
            resultSet = null;
            updateCount = (Integer) result;
            return false;
        }
    }
}
